from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import time
import os

from collections import defaultdict


API_TOKEN =("8319351645:AAGU2PoC-46btYYVBu00Igiq-E1MS4sxLaY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_interests = {}
waiting = []
pairs = {}
dislikes = defaultdict(lambda: defaultdict(list))
reports = defaultdict(lambda: defaultdict(list))

INTERESTS = {
    "games": "–Ü–≥—Ä–∏",
    "communication": "–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è",
    "books": "–ö–Ω–∏–≥–∏",
    "movies": "–§—ñ–ª—å–º–∏",
    "anime": "–ê–Ω—ñ–º–µ",
    "travel": "–ü–æ–¥–æ—Ä–æ–∂—ñ",
    "sports": "–°–ø–æ—Ä—Ç",
    "IT":"IT",
    "mems":"–ú–µ–º–∏",
    "tips":"–ü–æ—Ä–∞–¥–∏",
    
}

text = {
    "choose_lang":
        "–ú–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–ª—è –≤–∞—Å "
        "\n—Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ ,—è–∫–∏–π –≤–∏–±—Ä–∞–≤"
        "\n—Å—Ö–æ–∂—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ ."
        "\n"
        "\n"


        "\n–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏:",

    
    "done": "–Ü–Ω—Ç–µ—Ä–µ—Å–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ /search –¥–ª—è –ø–æ—à—É–∫—É —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞.",
    "searching": "–ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞...",
    "found": "–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ! –ú–æ–∂–µ—à –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è",
    "stopped": "–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /search –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞",
     "rules":"–ó –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–æ–∂–Ω–∞ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è —Ç—É—Ç https://t.me/anonchatt2_bot_rules ",

}

REPORT_REASONS = [
    "–†–µ–∫–ª–∞–º–∞",
    "–ü—Ä–æ–¥–∞–∂",
    "–ù–∞—Å–∏–ª–ª—è",
    "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ —Å—É—ó—Ü–∏–¥—É",
    "–°–ø–∞–º",
    "–°–ø—ñ–ª–∫—É—î—Ç—å—Å—è –Ω–µ –∑–∞ —Ç–∏–º —ñ–Ω—Ç–µ—Ä–µ—Å–æ–º",
    "–†–æ–∑–ø–∞–ª—é–≤–∞–Ω–Ω—è –≤–æ—Ä–æ–∂–Ω–µ—á—ñ"
]


def feedback_keyboard():
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("üëçüèª", callback_data="feedback_like"),
        InlineKeyboardButton("üëéüèª", callback_data="feedback_dislike"),
        InlineKeyboardButton("üö´", callback_data="feedback_report"),
    )
    return kb


def report_reasons_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    for reason in REPORT_REASONS:
        kb.add(InlineKeyboardButton(reason, callback_data=f"report_{reason}"))
    return kb


def check_punishment(user_id, action_type="dislike", reason=None):
    now = time.time()
    punishments = [
        (1, 3600),
        (2, 7200),
        (3, 3600),
        (4, 86400),
        (5, 172800),
        (6, 259200),
        (7, 604800),
        (8, 1209600),
        (9, 1814400),
        (10, 2592000),
        (11, 5184000),
        ("next", 777600)
    ]

    if action_type == "dislike":
        dislikes[user_id][reason].append(now)
        recent = [t for t in dislikes[user_id][reason] if now - t < 3600]
        if len(recent) >= 10:
            count = len(recent)
            return punishments[min(count, len(punishments)) - 1][1]

    elif action_type == "report":
        reports[user_id][reason].append(now)
        recent = [t for t in reports[user_id][reason] if now - t < 3600]
        if len(recent) > 5:
            count = len(recent)
            return punishments[min(count, len(punishments)) - 1][1]

    return None
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton("–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥"),
        KeyboardButton("–Ü–Ω—Ç–µ—Ä–µ—Å–∏"),
        KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç—É")
    )
    return kb



@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await show_interests_menu(message)
    


async def show_interests_menu(message: types.Message):
    kb = await build_interest_kb(message.from_user.id)
    await message.answer(text["choose_lang"], reply_markup=kb)


async def build_interest_kb(uid):
    kb = InlineKeyboardMarkup(row_width=2)
    for key, val in INTERESTS.items():
        selected = "‚úÖ" if key in user_interests.get(uid, set()) else ""
        kb.insert(InlineKeyboardButton(val + selected, callback_data=f"int_{key}"))
    kb.add(InlineKeyboardButton("‚úÖ–ì–æ—Ç–æ–≤–æ", callback_data="done"))
    return kb


@dp.callback_query_handler(lambda c: c.data.startswith("int_"))
async def toggle_interest(callback: types.CallbackQuery):
    uid = callback.from_user.id
    key = callback.data.replace("int_", "")
    user_interests.setdefault(uid, set())
    if key in user_interests[uid]:
        user_interests[uid].remove(key)
    else:
        user_interests[uid].add(key)
    await callback.message.edit_reply_markup(await build_interest_kb(uid))
    await callback.answer("‚úÖ–í–∏–±—ñ—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ")


@dp.callback_query_handler(lambda c: c.data == "done")
async def finish_interests(callback: types.CallbackQuery):
    await callback.message.answer(text["done"])


@dp.message_handler(commands=["search"])
async def cmd_search(message: types.Message):
    uid = message.from_user.id
    if uid not in waiting:
        waiting.append(uid)

    for other in waiting:
        if other != uid:
            if user_interests.get(uid) & user_interests.get(other):
                waiting.remove(uid)
                waiting.remove(other)
                pairs[uid] = other
                pairs[other] = uid
                await message.answer(text["found"])
                await bot.send_message(other, text["found"])
                break
@dp.message_handler(commands=["rules"])
async def cmd_rules(message: types.Message):
    await message.answer(text["rules"])


@dp.message_handler(commands=["stop"])
async def cmd_stop(message: types.Message):
    uid = message.from_user.id

    if uid in pairs:
        partner = pairs[uid]
        del pairs[uid]
        if partner in pairs:
            del pairs[partner]
            await bot.send_message(partner, text["stopped"], reply_markup=feedback_keyboard())


@dp.callback_query_handler(lambda c: c.data.startswith("feedback_"))
async def process_feedback(callback: types.CallbackQuery):
    uid = callback.from_user.id
    data = callback.data
    if data == "feedback_like":
        await callback.answer("–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è!")
    elif data == "feedback_dislike":
        punishment = check_punishment(uid, "dislike", "general")
        if punishment:
            await callback.answer(f"–í–∏ –ø–æ—Ä—É—à–∏–ª–∏ –Ω–∞—à—ñ –ø—Ä–∞–≤–∏–ª–∞. –ë–∞–Ω –Ω–∞ {punishment // 3600} –≥–æ–¥.")
        else:
            await callback.answer("–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è!")
    elif data == "feedback_report":
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É:", reply_markup=report_reasons_keyboard())
        await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("report_"))
async def process_report(callback: types.CallbackQuery):
    uid = callback.from_user.id
    reason = callback.data.replace("report_", "")
    punishment = check_punishment(uid, "report", reason)
    if punishment:
        await callback.answer(f"–°–∫–∞—Ä–≥–∞ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞. –ë–∞–Ω –Ω–∞ {punishment // 3600} –≥–æ–¥.")
    else:
        await callback.answer("–°–∫–∞—Ä–≥–∞ –ø—Ä–∏–π–Ω—è—Ç–∞")
@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    help_text = (
        "–¶–µ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è "
        "\n–≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ"
        "\n"
        "\n–ë–æ—Ç –≤–º—ñ—î –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,"
        "\n–≤—ñ–¥–µ–æ,–≥—ñ—Ñ–∫–∏,—Å—Ç—ñ–∫–µ—Ä–∏,"
        "\n–∞—É–¥—ñ–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–µ–Ω—è —Ç–∞"
        "\n–≤—ñ–¥–µ–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        "\n"
        
        "\n"
        "üìå –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:\n"
        
        "/start ‚Äì –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "/search ‚Äì –ó–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞\n"
        "/stop ‚Äì –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥\n"
        "/help ‚Äì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Ç–∞ —ó—Ö –æ–ø–∏—Å\n"
        "/rules ‚Äì –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç—É\n"
    )
    await message.answer(help_text)
@dp.message_handler(lambda message: message.text == "–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥")
async def start_dialog(message: types.Message):
    await cmd_search(message)


@dp.message_handler(lambda message: message.text == "–Ü–Ω—Ç–µ—Ä–µ—Å–∏")
async def interests(message: types.Message):
    await show_interests_menu(message)


@dp.message_handler(lambda message: message.text == "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç—É")
async def rules_btn(message: types.Message):
    await message.answer(text["rules"])




@dp.message_handler()
async def relay(message: types.Message):
    uid = message.from_user.id
    if uid in pairs:
        partner = pairs[uid]
        await bot.send_message(partner, message.text)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
